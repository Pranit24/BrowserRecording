{"version":3,"sources":["App.js","components/Header.js","serviceWorker.js","index.js"],"names":["FileSaver","require","hasGetUserMedia","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","App","props","componentDidMount","requestUserMedia","state","audio","addEventListener","stopAudio","alert","a","console","log","setState","micEnabled","startRecording","playFlag","prevState","recordFlag","rtcSession","stream","recordAudio","RecordRTCPromisesHandler","stopRecording","blob","getBlob","data","url","playAudio","src","preload","play","pause","currentTime","saveAudio","saveAs","Audio","type","mimeType","recorderType","StereoAudioRecorder","playButton","recordButton","saveButton","this","Button","variant","size","onClick","active","style","marginBottom","disabled","className","href","Container","marginTop","Row","Col","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55806739.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Button, Container, Row, Col } from 'react-bootstrap';\nimport { RecordRTCPromisesHandler, StereoAudioRecorder } from 'recordrtc'\nimport Header from \"./components/Header\"\n// import Navigation from \"./components/Navigation\";\nlet FileSaver = require('file-saver');\nconst hasGetUserMedia = !!(navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.webkitGetUserMedia ||\n  navigator.mozGetUserMedia || navigator.msGetUserMedia);\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      recordAudio: null,\n      src: null,\n      data: null,\n      url: null,\n      micEnabled: false,\n      recordFlag: true,\n      playFlag: true,\n      audio: new Audio(),\n      rtcSession: {\n        type: 'audio',\n        mimeType: 'audio/wav',\n        audio: true,\n        recorderType: StereoAudioRecorder\n      }\n\n    };\n\n  }\n\n\n  componentDidMount = () => {\n    if (!hasGetUserMedia) {\n      alert(\"Browser not supported\")\n      return;\n    }\n    this.requestUserMedia()\n    const audio = this.state.audio;\n    audio.addEventListener(\"ended\", () => {\n      this.stopAudio()\n    })\n  }\n\n\n  requestUserMedia = async () => {\n    console.log('requestUserMedia')\n    try {\n      await navigator.mediaDevices.getUserMedia({ audio: true });\n      this.setState({ micEnabled: true })\n    } catch (err) {\n      alert(\"Enable microphone and refresh\")\n      this.setState({ micEnabled: false })\n    }\n  }\n\n\n  startRecording = async () => {\n    this.requestUserMedia()\n    if (!this.state.playFlag) {\n      this.stopAudio()\n    }\n    this.setState(prevState => ({\n      recordFlag: !prevState.recordFlag,\n      playFlag: true\n    }))\n    let stream = await navigator.mediaDevices.getUserMedia(this.state.rtcSession, { audio: true });\n    this.setState({ recordAudio: new RecordRTCPromisesHandler(stream, this.state.rtcSession) });\n    this.state.recordAudio.startRecording();\n\n  }\n\n  stopRecording = async () => {\n    this.requestUserMedia();\n    this.setState(prevState => ({\n      recordFlag: !prevState.recordFlag\n    }))\n    let blob = await this.state.recordAudio.stopRecording();\n    const data = await this.state.recordAudio.getBlob();\n    this.setState({ data, url: blob })\n  }\n\n\n  playAudio = async () => {\n    this.setState(prevState => ({\n      playFlag: !prevState.playFlag\n    }))\n    const audio = this.state.audio\n    audio.src = this.state.url\n    audio.preload = \"metadata\"\n    audio.play();\n    this.setState({ audio });\n  }\n\n  stopAudio = () => {\n    this.setState(prevState => ({\n      playFlag: !prevState.playFlag\n    }))\n    const audio = this.state.audio;\n    audio.pause()\n    audio.currentTime = 0;\n    this.setState({ audio: audio });\n\n  }\n\n  saveAudio = () => {\n    FileSaver.saveAs(this.state.data, \"audio.wav\");\n  }\n\n\n  render() {\n    let playButton, recordButton, saveButton;\n\n    if (!this.state.micEnabled) {\n      recordButton = <Button variant=\"secondary\" size=\"lg\" onClick={this.startRecording} disabled style={{ marginBottom: \"20px\" }} >Start Recording</Button>\n    }\n    else if (this.state.recordFlag) {\n      recordButton = <Button variant=\"primary\" size=\"lg\" onClick={this.startRecording} active style={{ marginBottom: \"20px\" }} >Start Recording</Button>\n    } else {\n      recordButton = <Button variant=\"primary\" size=\"lg\" onClick={this.stopRecording} active style={{ marginBottom: \"20px\" }} >Stop Recording</Button>\n    }\n\n    if (this.state.data && this.state.recordFlag && this.state.playFlag) {\n      playButton = <Button variant=\"primary\" size=\"lg\" onClick={this.playAudio} active >Play Audio</Button>\n      saveButton = <Button variant=\"success\" size=\"lg\" onClick={this.saveAudio} active >Save Audio</Button>\n    } else if (this.state.data && this.state.recordFlag && !this.state.playFlag) {\n      playButton = <Button variant=\"danger\" size=\"lg\" onClick={this.stopAudio} active >Stop Playing Audio</Button>\n      saveButton = <Button variant=\"success\" size=\"lg\" onClick={this.saveAudio} active >Save Audio</Button>\n    }\n    return (\n      <div className=\"App\">\n        {Header()}\n        <Container style={{ marginTop: \"50px\" }}>\n          <Row>\n            <Col>\n              {recordButton}\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              {playButton}\n            </Col>\n            <Col>\n              {saveButton}\n            </Col>\n            <Col></Col>\n            <Col></Col>\n            <Col></Col>\n          </Row>\n        </Container>\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div>\r\n            <h1>Browser Recorder</h1>\r\n            <p><sub>Tested in Chrome, Firefox and Safari</sub></p>\r\n            <p>\r\n                This is a simple web application used to record audio using your microphone and play it back or save it to your local machine\r\n            </p>\r\n            <p>GitHub Link:<a href=\"https://github.com/Pranit24/BrowserRecording\">https://github.com/Pranit24/BrowserRecording</a></p>\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}