{"version":3,"sources":["components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","Navbar","collapseOnSelect","expand","bg","variant","style","marginBottom","Toggle","aria-controls","Collapse","id","Nav","className","NavDropdown","title","Item","href","Component","FileSaver","require","hasGetUserMedia","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","App","props","componentDidMount","requestUserMedia","alert","a","console","log","mediaDevices","audio","setState","micEnabled","startRecording","prevState","recordFlag","state","rtcSession","stream","recordAudio","RecordRTCPromisesHandler","stopRecord","stopRecording","blob","getBlob","data","url","playAudio","playFlag","Audio","play","stopAudio","pause","saveAudio","saveAs","src","type","mimeType","recorderType","StereoAudioRecorder","playButton","recordButton","saveButton","this","Button","size","onClick","active","disabled","Container","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3a0a79a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Nav, Navbar, NavDropdown } from \"react-bootstrap\";\r\nexport default class Navigation extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" style={{ marginBottom: \"50px\" }}>\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\r\n                                <NavDropdown.Item href=\"#action/3.1\">Home</NavDropdown.Item>\r\n                                <NavDropdown.Item href=\"#action/3.2\">Record</NavDropdown.Item>\r\n                            </NavDropdown>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Button, Container, Row, Col } from 'react-bootstrap';\nimport { RecordRTCPromisesHandler, StereoAudioRecorder } from 'recordrtc'\nimport Navigation from \"./components/Navigation\";\nlet FileSaver = require('file-saver');\nconst hasGetUserMedia = !!(navigator.getUserMedia || navigator.webkitGetUserMedia ||\n  navigator.mozGetUserMedia || navigator.msGetUserMedia);\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      recordAudio: null,\n      src: null,\n      data: null,\n      url: null,\n      micEnabled: false,\n      recordFlag: true,\n      playFlag: true,\n      audio: null,\n      rtcSession: {\n        type: 'audio',\n        mimeType: 'audio/ogg',\n        audio: true,\n        recorderType: StereoAudioRecorder\n      }\n\n    };\n\n  }\n\n\n  componentDidMount = () => {\n    if (!hasGetUserMedia) {\n      alert(\"Browser not supported\")\n      return;\n    }\n    this.requestUserMedia()\n  }\n\n  requestUserMedia = async () => {\n    console.log('requestUserMedia')\n    try {\n      await navigator.mediaDevices.getUserMedia({ audio: true });\n      this.setState({ micEnabled: true })\n    } catch (err) {\n      alert(\"Enable microphone and refresh\")\n      this.setState({ micEnabled: false })\n    }\n  }\n\n\n  startRecording = async () => {\n    this.requestUserMedia()\n    this.setState(prevState => ({\n      recordFlag: !prevState.recordFlag\n    }))\n    let stream = await navigator.mediaDevices.getUserMedia(this.state.rtcSession, { audio: true });\n    this.setState({ recordAudio: new RecordRTCPromisesHandler(stream, this.state.rtcSession) });\n    this.state.recordAudio.startRecording();\n\n  }\n\n  stopRecord = async () => {\n    this.requestUserMedia();\n    this.setState(prevState => ({\n      recordFlag: !prevState.recordFlag\n    }))\n    let blob = await this.state.recordAudio.stopRecording();\n    const data = await this.state.recordAudio.getBlob();\n    this.setState({ data, url: blob })\n  }\n\n\n  playAudio = () => {\n    this.setState(prevState => ({\n      playFlag: !prevState.playFlag\n    }))\n    const audio = new Audio(this.state.url)\n    this.setState({ audio })\n    audio.play();\n  }\n\n  stopAudio = () => {\n    this.setState(prevState => ({\n      playFlag: !prevState.playFlag\n    }))\n    const audio = this.state.audio;\n    audio.pause()\n\n  }\n\n  saveAudio = () => {\n    FileSaver.saveAs(this.state.data, \"audio.ogg\");\n  }\n\n\n  render() {\n    let playButton, recordButton, saveButton;\n\n    if (!this.state.micEnabled) {\n      recordButton = <Button variant=\"secondary\" size=\"lg\" onClick={this.startRecording} disabled style={{ marginBottom: \"20px\" }} >Start Recording</Button>\n    }\n    else if (this.state.recordFlag) {\n      recordButton = <Button variant=\"primary\" size=\"lg\" onClick={this.startRecording} active style={{ marginBottom: \"20px\" }} >Start Recording</Button>\n    } else {\n      recordButton = <Button variant=\"primary\" size=\"lg\" onClick={this.stopRecord} active style={{ marginBottom: \"20px\" }} >Stop Recording</Button>\n    }\n\n    if (this.state.data && this.state.recordFlag && this.state.playFlag) {\n      playButton = <Button variant=\"primary\" size=\"lg\" onClick={this.playAudio} active >Play Audio</Button>\n      saveButton = <Button variant=\"success\" size=\"lg\" onClick={this.saveAudio} active >Save Audio</Button>\n    } else if (this.state.data && this.state.recordFlag && !this.state.playFlag) {\n      playButton = <Button variant=\"danger\" size=\"lg\" onClick={this.stopAudio} active >Stop Playing Audio</Button>\n      saveButton = <Button variant=\"success\" size=\"lg\" onClick={this.saveAudio} active >Save Audio</Button>\n    }\n    return (\n      <div className=\"App\">\n        <Navigation />\n        <Container>\n          <Row>\n            <Col>\n              {recordButton}\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              {playButton}\n            </Col>\n            <Col>\n              {saveButton}\n            </Col>\n          </Row>\n        </Container>\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}