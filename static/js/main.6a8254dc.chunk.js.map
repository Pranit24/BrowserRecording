{"version":3,"sources":["App.js","components/Header.js","serviceWorker.js","index.js"],"names":["workerOptions","encoderWorkerFactory","Worker","process","OggOpusEncoderWasmPath","WebMOpusEncoderWasmPath","FileSaver","require","hasGetUserMedia","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","App","props","componentDidMount","requestUserMedia","state","audio","addEventListener","stopAudio","duration","console","log","setState","setDuration","this","alert","a","window","MediaRecorder","isTypeSupported","OpusMediaRecorder","micEnabled","startRecording","playFlag","prevState","recordFlag","data","then","stream","recorder","mimeType","start","e","onDataAvailable","url","URL","createObjectURL","src","stopRecording","stop","playAudio","play","pause","currentTime","saveAudio","saveAs","recordAudio","Audio","playButton","recordButton","saveButton","type","size","onClick","active","style","marginBottom","disabled","className","href","marginTop","span","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a8254dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Button, Row, Col } from 'antd';\r\nimport Header from \"./components/Header\"\r\nimport \"antd/dist/antd.css\";\r\nimport OpusMediaRecorder from 'opus-media-recorder'\r\n// opus-media-recorder options\r\nconst workerOptions = {\r\n  encoderWorkerFactory: function () {\r\n    return new Worker(process.env.PUBLIC_URL + '/opus-media-recorder/encoderWorker.umd.js')\r\n  },\r\n  OggOpusEncoderWasmPath: process.env.PUBLIC_URL + '/opus-media-recorder/OggOpusEncoder.wasm',\r\n  WebMOpusEncoderWasmPath: process.env.PUBLIC_URL + '/opus-media-recorder/WebMOpusEncoder.wasm',\r\n};\r\n\r\nlet FileSaver = require('file-saver');\r\nconst hasGetUserMedia = !!(navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.webkitGetUserMedia ||\r\n  navigator.mozGetUserMedia || navigator.msGetUserMedia);\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      recordAudio: null,\r\n      src: null,\r\n      url: null,\r\n      data: null,\r\n      micEnabled: false,\r\n      recordFlag: true,\r\n      playFlag: true,\r\n      audio: new Audio()\r\n\r\n    };\r\n\r\n  }\r\n\r\n\r\n  componentDidMount = () => {\r\n    if (!hasGetUserMedia) {\r\n      alert(\"Browser not supported\")\r\n      return;\r\n    }\r\n    this.requestUserMedia()\r\n    this.state.audio.addEventListener(\"ended\", () => {\r\n      this.stopAudio()\r\n    })\r\n    let setDuration = (duration) => {\r\n      console.log(duration)\r\n      this.setState({ duration })\r\n    }\r\n    // let duration = 0;\r\n    this.state.audio.addEventListener(\"loadeddata\", function () {\r\n      let duration = this.duration\r\n      setDuration(duration)\r\n    });\r\n  }\r\n\r\n\r\n  requestUserMedia = async () => {\r\n    console.log('requestUserMedia')\r\n    try {\r\n      await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      if (!window.MediaRecorder) {\r\n        window.MediaRecorder = OpusMediaRecorder;\r\n      }\r\n      // Check if a target format (e.g. audio/ogg) is supported.\r\n      else if (!window.MediaRecorder.isTypeSupported('audio/ogg;codecs=opus')) {\r\n        window.MediaRecorder = OpusMediaRecorder;\r\n      }\r\n      this.setState({ micEnabled: true })\r\n    } catch (err) {\r\n      alert(\"Enable microphone and refresh \" + err)\r\n      this.setState({ micEnabled: false })\r\n    }\r\n  }\r\n\r\n\r\n  startRecording = async () => {\r\n    this.requestUserMedia()\r\n    if (!this.state.playFlag) {\r\n      this.stopAudio()\r\n    }\r\n    this.setState(prevState => ({\r\n      recordFlag: !prevState.recordFlag,\r\n      playFlag: true,\r\n      data: null\r\n    }))\r\n    navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\r\n      const options = { mimeType: 'audio/ogg; codecs=opus' }\r\n      this.recorder = new MediaRecorder(stream, options, workerOptions);\r\n      this.setState({ state: 'inactive' });\r\n      this.recorder.start();\r\n\r\n      this.recorder.addEventListener('dataavailable', (e) => {\r\n        console.log('Recording stopped, data available');\r\n        this.onDataAvailable(e);\r\n      });\r\n      this.recorder.addEventListener('start', (e) => {\r\n        console.log('start');\r\n        this.setState({ state: 'recording' });\r\n      })\r\n      this.recorder.addEventListener('stop', (e) => {\r\n        console.log('stop');\r\n        this.setState({ state: 'inactive' });\r\n      })\r\n      this.recorder.addEventListener('pause', (e) => {\r\n        console.log('pause');\r\n        this.setState({ state: 'paused' });\r\n      })\r\n      this.recorder.addEventListener('resume', (e) => {\r\n        console.log('resume');\r\n        this.setState({ state: 'recording' });\r\n      })\r\n      this.recorder.addEventListener('error', (e) => {\r\n        console.log('error');\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n  onDataAvailable = (e) => {\r\n    this.setState({\r\n      data: e.data\r\n    })\r\n    this.setState({\r\n      url: URL.createObjectURL(this.state.data)\r\n    })\r\n    const audio = this.state.audio\r\n    audio.src = this.state.url\r\n    this.setState({ audio })\r\n  }\r\n\r\n  stopRecording = async () => {\r\n    this.requestUserMedia();\r\n    this.setState(prevState => ({\r\n      recordFlag: !prevState.recordFlag\r\n    }))\r\n    this.recorder.stop()\r\n  }\r\n\r\n  setDuration = () => {\r\n    console.log(this.duration)\r\n    // this.setState({ duration: e.duration })\r\n  }\r\n\r\n\r\n  playAudio = async () => {\r\n    this.setState(prevState => ({\r\n      playFlag: !prevState.playFlag\r\n    }))\r\n    const audio = this.state.audio\r\n    audio.src = this.state.url\r\n    audio.play();\r\n    this.setState({ audio })\r\n  }\r\n\r\n\r\n\r\n\r\n  stopAudio = () => {\r\n    this.setState(prevState => ({\r\n      playFlag: !prevState.playFlag\r\n    }))\r\n    const audio = this.state.audio\r\n    audio.pause()\r\n    audio.currentTime = 0;\r\n    this.setState({ audio })\r\n\r\n  }\r\n\r\n  saveAudio = () => {\r\n    FileSaver.saveAs(this.state.data, \"audio.opus\");\r\n  }\r\n\r\n\r\n  render() {\r\n    let playButton, recordButton, saveButton;\r\n    // Disable if mic is not enabled\r\n    if (!this.state.micEnabled) {\r\n      recordButton = <Button type=\"secondary\" size=\"large\" onClick={this.startRecording} disabled style={{ marginBottom: \"20px\" }} >Start Recording</Button>\r\n    }\r\n    // Switch between start and stop button\r\n    else if (this.state.recordFlag) {\r\n      recordButton = <Button type=\"primary\" size=\"large\" onClick={this.startRecording} active style={{ marginBottom: \"20px\" }} >Start Recording</Button>\r\n    } else {\r\n      recordButton = <Button type=\"primary\" size=\"large\" onClick={this.stopRecording} active style={{ marginBottom: \"20px\" }} >Stop Recording</Button>\r\n    }\r\n\r\n    // Only display if there is data available\r\n    if (this.state.data && this.state.recordFlag && this.state.playFlag) {\r\n      playButton = <Button type=\"primary\" size=\"large\" onClick={this.playAudio} active >Play {this.state.duration}s Audio</Button>\r\n      saveButton = <Button type=\"primary\" size=\"large\" onClick={this.saveAudio} active >Save Audio</Button>\r\n    } else if (this.state.data && this.state.recordFlag && !this.state.playFlag) {\r\n      playButton = <Button type=\"danger\" size=\"large\" onClick={this.stopAudio} active >Stop Playing Audio</Button>\r\n      saveButton = <Button type=\"primary\" size=\"large\" onClick={this.saveAudio} active >Save Audio</Button>\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        {Header()}\r\n        <Row style={{ marginTop: \"50px\" }}>\r\n          <Col span={24}>\r\n            {recordButton}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col span={12}>\r\n            {playButton}\r\n          </Col>\r\n          <Col span={12}>\r\n            {saveButton}\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div>\r\n            <h1>Browser Recorder</h1>\r\n            <p><sub>Tested in Chrome, Firefox and Safari</sub></p>\r\n            <p>\r\n                This is a simple web application used to record audio using your microphone and play it back or save it to your local machine\r\n            </p>\r\n            <p>GitHub Link:<a href=\"https://github.com/Pranit24/BrowserRecording\">https://github.com/Pranit24/BrowserRecording</a></p>\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}